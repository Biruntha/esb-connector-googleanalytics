<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->

<!-- Method Documentation URL: https://developers.google.com/analytics/devguides/reporting/core/v3/reference -->
<template name="getReportData" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="ids"
               description="The unique table ID of the form ga:XXXX, where XXXX is the Analytics view (profile) ID for which the query will retrieve the data."/>
    <parameter name="metrics" description="A list of comma-separated metrics, such as ga:sessions,ga:bounces."/>
    <parameter name="startDate"
               description="Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date."/>
    <parameter name="endDate"
               description="End date for fetching Analytics data. Request can specify an end date formatted as YYYY-MM-DD, or as a relative date ."/>
    <parameter name="dimensions"
               description="A list of comma-separated dimensions for your Analytics data, such as ga:browser,ga:city."/>
    <parameter name="sort"
               description="A list of comma-separated dimensions and metrics indicating the sorting order and sorting direction for the returned data."/>
    <parameter name="filters"
               description="Dimension or metric filters that restrict the data returned for your request."/>
    <parameter name="segment" description="Segments the data returned for your request."/>
    <parameter name="samplingLevel"
               description="The desired sampling level. Allowed Values: DEFAULT Returns response with a sample size that balances speed and accuracy. FASTER Returns a fast response with a smaller sample size. HIGHER_PRECISION Returns a more accurate response using a large sample size, but this may result in the response being slower."/>
    <parameter name="startIndex"
               description="The first row of data to retrieve, starting at 1. Use this parameter as a pagination mechanism along with the max-results parameter."/>
    <parameter name="maxResults" description="The maximum number of rows to include in the response."/>
    <parameter name="output" description="Specifies IP address of the end user for whom the API call is being made."/>
    <parameter name="fields" description="Selector specifying a subset of fields to include in the response."/>
    <parameter name="prettyPrint" description="Returns response with indentations and line breaks. Default false."/>
    <parameter name="userIp" description="Specifies IP address of the end user for whom the API call is being made."/>
    <parameter name="quotauser" description="Alternative to userIp in cases when the user's IP address is unknown."/>
    <parameter name="callback" description="Same of the JavaScript callback function that handles the response."/>
    <parameter name="key" description="Used for OAuth 1.0a authorization to specify your application to get quota. "/>
    <sequence>
        <property name="uri.var.ids" expression="$func:ids"/>
        <property name="uri.var.metrics" expression="$func:metrics"/>
        <property name="uri.var.startDate" expression="$func:startDate"/>
        <property name="uri.var.endDate" expression="$func:endDate"/>
        <property name="uri.var.dimensions" expression="$func:dimensions"/>
        <property name="uri.var.sort" expression="$func:sort"/>
        <property name="uri.var.filters" expression="$func:filters"/>
        <property name="uri.var.segment" expression="$func:segment"/>
        <property name="uri.var.samplingLevel" expression="$func:samplingLevel"/>
        <property name="uri.var.startIndex" expression="$func:startIndex"/>
        <property name="uri.var.maxResults" expression="$func:maxResults"/>
        <property name="uri.var.output" expression="$func:output"/>
        <property name="uri.var.fields" expression="$func:fields"/>
        <property name="uri.var.prettyPrint" expression="$func:prettyPrint"/>
        <property name="uri.var.userIp" expression="$func:userIp"/>
        <property name="uri.var.quotauser" expression="$func:quotauser"/>
        <property name="uri.var.callback" expression="$func:callback"/>
        <property name="uri.var.key" expression="$func:key"/>
        <script language="js">
            <![CDATA[
            var endDate = mc.getProperty('uri.var.endDate');
            var sort = mc.getProperty('uri.var.sort');
            var filters = mc.getProperty('uri.var.filters');
            var samplingLevel = mc.getProperty('uri.var.samplingLevel');
            var segment = mc.getProperty('uri.var.segment');
            var output = mc.getProperty('uri.var.output');
            var quotauser = mc.getProperty('uri.var.quotauser');
            var startIndex = mc.getProperty('uri.var.startIndex');
            var maxResults = mc.getProperty('uri.var.maxResults');
            var ids = mc.getProperty('uri.var.ids');
            var userIp = mc.getProperty('uri.var.userIp');
            var callback = mc.getProperty('uri.var.callback');
            var metrics = mc.getProperty('uri.var.metrics');
            var fields = mc.getProperty('uri.var.fields');
            var startDate = mc.getProperty('uri.var.startDate');
            var dimensions = mc.getProperty('uri.var.dimensions');
            var key = mc.getProperty('uri.var.key');
            var urlQuery = '?ids=' + ids;
            urlQuery += '&metrics=' + metrics;
            urlQuery += '&start-date=' + startDate;
            urlQuery += '&end-date=' + endDate;
            if (dimensions != null && dimensions != "") {
               urlQuery += '&dimensions=' + dimensions;
            }
            if (sort != null && sort != "") {
               urlQuery += '&sort=' + sort;
            }
            if (filters != null && filters != "") {
               urlQuery += '&filters=' + filters;
            }
            if (segment != null && segment != "") {
               urlQuery += '&segment=' + segment;
            }
            if (samplingLevel != null && samplingLevel != "") {
               urlQuery += '&samplingLevel=' + samplingLevel;
            }
            if (startIndex != null && startIndex != "") {
               urlQuery += '&start-index=' + startIndex;
            }
            if (maxResults != null && maxResults != "") {
               urlQuery += '&max-results=' + maxResults;
            }
            if (output != null && output != "") {
               urlQuery += '&output=' + output;
            }
            if (fields != null && fields != "") {
               urlQuery += '&fields=' + fields;
            }
            if (userIp != null && userIp != "") {
               urlQuery += '&userIp=' + userIp;
            }
            if (quotauser != null && quotauser != "") {
               urlQuery += '&quotaUser=' + quotauser;
            }
            if (callback != null && callback != "") {
               urlQuery += '&callback=' + callback;
            }
            if (key != null && key != "") {
               urlQuery += '&key=' + key;
            }
            mc.setProperty('uri.var.urlQuery', urlQuery);
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="{+uri.var.apiUrl}/analytics/v3/data/ga{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <property name="uri.var.statusCode" expression="$axis2:HTTP_SC"/>
        <!-- If the call fails with 401 Unauthorized, then get a new access token by calling getAccessTokenFromRefreshToken
           method. -->
        <filter xpath="get-property('uri.var.statusCode') = 401 and get-property('uri.var.refreshTokenNegotiated') = 'false'">
            <then>
                <googleanalytics.getAccessTokenFromRefreshToken/>
                <header name="Authorization" expression="fn:concat('Bearer ', get-property('uri.var.accessToken'))"
                        scope="transport"/>
                <googleanalytics.getReportData/>
            </then>
        </filter>
        <!-- Remove custom Headers from the API Response -->
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="Expires" action="remove" scope="transport"/>
        <header name="X-XSS-Protection" action="remove" scope="transport"/>
        <header name="Alternate-Protocol" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
        <header name="Alt-Svc" action="remove" scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="Pragma" action="remove" scope="transport"/>
    </sequence>
</template>
